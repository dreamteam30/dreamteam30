/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface_airliner;

import Business.Airliners;

import Business.MapStore;

import com.sun.javafx.tk.quantum.MasterTimer;
import java.awt.CardLayout;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author junyaoli
 */
public class AirlineManageJpanel extends javax.swing.JPanel {

    /**
     * Creates new form AirlineMainJpanel
     */
    private MapStore mapstore;
    private Airliners airliners;
    private JPanel rightpanel;
    
    public AirlineManageJpanel(JPanel rightpanel, MapStore mapstore ) {
        initComponents();
        this.mapstore=mapstore;
        this.rightpanel = rightpanel;
        populate();
        try {
            System.out.println("Interface_airliner.AirlineManageJpanel.<init>()");
            System.out.println(mapstore.getAirlinerMap().toString());
        } catch (Exception e) {
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        AirlinerTable = new javax.swing.JTable();
        Viewbtn = new javax.swing.JButton();
        Createbtn = new javax.swing.JButton();
        Deletebtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        Searchbtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        SearchTextfield = new javax.swing.JTextField();

        AirlinerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Flight number", "Departure City", "Arrival City", "Departure Time", "Arrival Time"
            }
        ));
        jScrollPane2.setViewportView(AirlinerTable);

        Viewbtn.setText("View");
        Viewbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewbtnActionPerformed(evt);
            }
        });

        Createbtn.setText("Create");
        Createbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreatebtnActionPerformed(evt);
            }
        });

        Deletebtn.setText("Delete");
        Deletebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeletebtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel1.setText("Current AirLiner");

        Searchbtn.setText("Search");
        Searchbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchbtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Flight Number:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(274, 274, 274)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(SearchTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Searchbtn))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Viewbtn)
                                .addGap(78, 78, 78)
                                .addComponent(Createbtn)
                                .addGap(54, 54, 54)
                                .addComponent(Deletebtn)))))
                .addContainerGap(59, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Viewbtn)
                    .addComponent(Createbtn)
                    .addComponent(Deletebtn))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Searchbtn)
                    .addComponent(jLabel2)
                    .addComponent(SearchTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(54, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void CreatebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreatebtnActionPerformed
        // TODO add your handling code here:
         
        AirlinerCreateJPanel panel = new AirlinerCreateJPanel(rightpanel, mapstore);
        this.rightpanel.add(panel);
        CardLayout layout = (CardLayout) rightpanel.getLayout();
        layout.next(rightpanel);
    }//GEN-LAST:event_CreatebtnActionPerformed

    private void SearchbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchbtnActionPerformed
        // TODO add your handling code here:
        
        
             
        String searchnumber = SearchTextfield.getText();
        DefaultTableModel dtm= (DefaultTableModel)AirlinerTable.getModel();
        dtm.setRowCount(0);
        
        for (Map.Entry<Integer, Airliners> a: mapstore.getInstance().getAirlinerMap().entrySet()) {
            
            Airliners al = a.getValue();
            
            if (searchnumber.equals(al.getAirlinerNumber())) {
                 Object[]row = new Object[dtm.getColumnCount()];
                 row [0] = al.getAirlinerNumber();
                 row [1] = al.getDeparturalCity();
                 row [2] = al.getArrivalCity();
                 row [3] = al.getDeparturalTime();
                 row [4] = al.getArrivalTime();
                 dtm.addRow(row);
            }else{
                JOptionPane.showMessageDialog(null, "Please insert correct airliner number");
            }
        }
        
       
    }//GEN-LAST:event_SearchbtnActionPerformed

    private void ViewbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewbtnActionPerformed
        // TODO add your handling code here:
        int getrow = AirlinerTable.getSelectedRow();
        if(getrow>=0){
            for (Map.Entry<Integer, Airliners> entry : mapstore.getInstance().getAirlinerMap().entrySet()) {
                
                
                Airliners value = entry.getValue();
                if (value.getAirlinerNumber().equals(AirlinerTable.getValueAt(getrow, 0))) {
                    AirlineViewJPanel panel = new AirlineViewJPanel(rightpanel, value);
          this.rightpanel.add(panel);
          CardLayout layout = (CardLayout) rightpanel.getLayout();
          layout.next(rightpanel);
                }
            }
            
          
        }else
            JOptionPane.showMessageDialog(null, "Please select a row!");
       
    }//GEN-LAST:event_ViewbtnActionPerformed

    private void DeletebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeletebtnActionPerformed
        // TODO add your handling code here:
        int getrow = AirlinerTable.getSelectedRow();
        if (getrow>=0) {
            int selectionbtn = JOptionPane.YES_NO_OPTION;
            int selectionresult = JOptionPane.showConfirmDialog(null, "Are you sure?","Warning", selectionbtn);
            
            if (selectionresult==JOptionPane.YES_OPTION) {                
                
                for(Map.Entry <Integer, Airliners> a: mapstore.getInstance().getAirlinerMap().entrySet()){
                    
                     String al = String.valueOf(AirlinerTable.getValueAt(getrow, 0)) ;
                     Airliners air = a.getValue();
                if (al.equals(air.getAirlinerNumber())) {
                    
                     mapstore.getInstance().getAirlinerMap().remove(air.getAirlinerID());
                }
                }
            }
            
        }else
            JOptionPane.showMessageDialog(null, "Please select a row");
        
        populate();
    }//GEN-LAST:event_DeletebtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable AirlinerTable;
    private javax.swing.JButton Createbtn;
    private javax.swing.JButton Deletebtn;
    private javax.swing.JTextField SearchTextfield;
    private javax.swing.JButton Searchbtn;
    private javax.swing.JButton Viewbtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    private void populate() {
   
            DefaultTableModel dtm= (DefaultTableModel)AirlinerTable.getModel();
            dtm.setRowCount(0);
            try {
                for (Map.Entry<Integer, Airliners> ar : mapstore.getInstance().getAirlinerMap().entrySet()) {
                Object[]row = new Object[dtm.getColumnCount()];
                Airliners a = ar.getValue();
               
                row [0] = a.getAirlinerNumber();
                row [1] = a.getDeparturalCity();
                row [2] = a.getArrivalCity();
                row [3] = a.getDeparturalTime();
                row [4] = a.getArrivalTime();
                dtm.addRow(row);
                
                System.out.println("Interface_airliner.AirlineManageJpanel.populate()");
                }
        } catch (Exception e) {
        }
            
         
    }
    }




